class AuthUtils {
  static bool isItuEmail(String? email) {
    if (email == null) return false;
    final e = email.trim().toLowerCase();
    return e.endsWith('@itu.dk');
  }

  static bool isForbiddenEmail(String? email) {
    if (email == null) return false;
    final e = email.trim().toLowerCase();
    const forbiddenEmails = [
      'it@itu.dk',
      'dpo@itu.dk',
      'itu@itu.dk',
      'admission@itu.dk',
      'sap@itu.dk',
      'finance@itu.dk',
      'personale@itu.dk',
      'presse@itu.dk',
      'studentadvisors@itu.dk',
      'phdsupport@itu.dk',
      'alumni@itu.dk',
      'professionaleducation@itu.dk',
      'erhvervssamarbejde@itu.dk',
      'securemail@itu.dk',
      'admin@itu.dk',
      'info@itu.dk',
      'contact@itu.dk',
      'help@itu.dk',
      'webmaster@itu.dk',
      'postmaster@itu.dk',
      'noreply@itu.dk',
      'no-reply@itu.dk',
      'system@itu.dk',
      'root@itu.dk',
      'administrator@itu.dk',
      'test@itu.dk',
      'demo@itu.dk',
      'rektor@itu.dk',
      'director@itu.dk',
      'ceo@itu.dk',
    ];
    return forbiddenEmails.contains(e);
  }

  static bool isForbiddenDisplayName(String? displayName) {
    if (displayName == null) return false;
    final name = displayName.trim().toLowerCase();
    const forbiddenNames = [
      'admin',
      'administrator',
      'moderator',
      'mod',
      'staff',
      'official',
      'itu',
      'it university',
      'it university of copenhagen',
      'itu copenhagen',
      'support',
      'help',
      'system',
      'bot',
      'robot',
      'assistant',
      'service',
      'info',
      'information',
      'contact',
      'webmaster',
      'superuser',
      'root',
      'sysadmin',
      'manager',
      'coordinator',
      'director',
      'president',
      'dean',
      'chair',
      'head',
      'lead',
      'chief',
      'executive',
      'board',
      'committee',
      'council',
      'faculty',
      'department',
      'office',
      'bureau',
      'authority',
      'representative',
      'spokesperson',
      'press',
      'media',
      'news',
      'announcement',
      'notification',
      'alert',
      'warning',
      'error',
      'system',
      'server',
      'database',
      'application',
      'platform',
      'portal',
      'gateway',
      'hub',
      'center',
      'centre',
      'rektor',
      'prorektor',
      'vicerektor',
      'dekan',
      'institutleder',
      'studieleder',
      'uddannelsesleder',
      'forskningsleder',
      'administrationschef',
      'kommunikationschef',
      'it-chef',
      'studiechef',
      'studienævnsformand',
      'ph.d.-skoleleder',
      'forsker',
      'lektor',
      'adjunkt',
      'professor',
      'docent',
      'ekstern lektor',
      'studielektor',
      'studieadjunkt',
      'ph.d.-stipendiat',
      'postdoc',
      'forskningsassistent',
      'videnskabelig assistent',
      'laborant',
      'sekretær',
      'kontorchef',
      'afdelingsleder',
      'teamleder',
      'projektleder',
      'koordinator',
      'konsulent',
      'rådgiver',
      'specialist',
      'ekspert',
      'chef',
      'direktør',
      'leder',
      'formand',
      'næstformand',
      'bestyrelse',
      'bestyrelsesmedlem',
      'udvalg',
      'råd',
      'komité',
      'arbejdsgruppe',
      'taskforce',
      'styregruppe',
      'referencegruppe',
      'studienævn',
      'institut',
      'afdeling',
      'kontor',
      'administration',
      'ledelse',
      'myndighed',
      'repræsentant',
      'talsmand',
      'talskvinde',
      'presse',
      'medie',
      'nyheder',
      'meddelelse',
      'bekendtgørelse',
      'påmindelse',
      'alarm',
      'advarsel',
      'fejl',
      'applikation',
      'centrum',
    ];
    return forbiddenNames.contains(name);
  }

  static String? passwordPolicyError(String? password) {
    if (password == null || password.length < 8) {
      return 'Password must be at least 8 characters';
    }
    final hasUpper = RegExp(r'[A-Z]').hasMatch(password);
    final hasLower = RegExp(r'[a-z]').hasMatch(password);
    final hasDigit = RegExp(r'\d').hasMatch(password);
    if (!hasUpper || !hasLower || !hasDigit) {
      return 'Password must contain upper, lower and a digit';
    }
    return null;
  }
}
