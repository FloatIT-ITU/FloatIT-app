rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ===== HELPER FUNCTIONS =====

    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Check if user has ITU email domain
    function isITUEmail() {
      return isAuthenticated() &&
             request.auth.token.email.matches('.*@itu\\.dk$');
    }

    // Check if user is owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Check if user is admin
    function isAdmin() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.admin == true;
    }

    // Check if user is event host
    function isEventHost(eventId) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/events/$(eventId)) &&
             get(/databases/$(database)/documents/events/$(eventId)).data.host == request.auth.uid;
    }

    // ===== USERS COLLECTION =====
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && 
        (!('admin' in request.resource.data) || request.resource.data.admin == false);
      allow update: if isOwner(userId) &&
        !('admin' in request.resource.data.diff(resource.data).affectedKeys());
      allow read: if isAdmin();
      allow update: if isAdmin() && isITUEmail();
    }

    // ===== PUBLIC USERS COLLECTION =====
    match /public_users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId) && isITUEmail() &&
        (!('displayName' in request.resource.data) || 
         (request.resource.data.displayName is string && 
          request.resource.data.displayName.size() <= 50)) &&
        (!('occupation' in request.resource.data) || 
         (request.resource.data.occupation is string && 
          request.resource.data.occupation.size() <= 100));
      allow update: if isOwner(userId) && isITUEmail() && (
        (!('displayName' in request.resource.data) || 
         (request.resource.data.displayName is string && 
          request.resource.data.displayName.size() <= 50 &&
          request.resource.data.displayName.size() > 0)) &&
        (!('occupation' in request.resource.data) || 
         (request.resource.data.occupation is string && 
          request.resource.data.occupation.size() <= 100)) &&
        (!('notificationsEnabled' in request.resource.data) ||
         (request.resource.data.notificationsEnabled is bool))
      );
      allow update: if isAdmin() && isITUEmail();
    }

    // ===== FCM TOKENS =====
    // Store tokens under: fcm_tokens/{uid}/tokens/{tokenId}
    match /fcm_tokens/{userId}/tokens/{tokenId} {
      allow create: if isAuthenticated() && request.auth.uid == userId &&
        request.resource.data.token is string &&
        request.resource.data.token.size() > 0 &&
        request.resource.data.createdAt is timestamp &&
        (!exists(/databases/$(database)/documents/public_users/$(userId)) ||
         get(/databases/$(database)/documents/public_users/$(userId)).data.notificationsEnabled == true);

      allow delete: if isAuthenticated() && request.auth.uid == userId;
      allow update: if false;
      allow get, list: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
    }

    // ===== NOTIFICATIONS COLLECTION =====
    match /notifications/{notificationId} {
      allow create, read, update, delete: if isAdmin();
    }

    // ===== EVENTS COLLECTION =====
    match /events/{eventId} {
      allow read: if true;
      allow create, delete: if isAdmin() && isITUEmail();
      allow update: if isAdmin() && isITUEmail();
      allow update: if isAuthenticated() && isITUEmail() &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['attendees', 'waitingListUids']);
    }

    // ===== EVENT BANNERS =====
    match /events/{eventId}/meta/event_banner {
      allow read: if true;
      allow write: if isITUEmail() && (isEventHost(eventId) || isAdmin());
    }

    // ===== GLOBAL BANNER =====
    match /app/global_banner {
      allow read: if true;
      allow write: if isAdmin() && isITUEmail();
    }

    // ===== TEMPLATES COLLECTION =====
    match /templates/{templateId} {
      allow read: if true;
      allow write: if isAdmin() && isITUEmail();
    }

    // ===== JOIN REQUESTS COLLECTION =====
    match /join_requests/{requestId} {
      allow create: if isAuthenticated() && isITUEmail() &&
        request.resource.data.uid == request.auth.uid &&
        request.resource.data.type in ['join', 'leave'] &&
        request.resource.data.eventId is string &&
        request.resource.data.createdAt is string;
      allow read: if isAdmin();
      allow delete: if isAdmin();
    }

    // ===== AUTH LOGS COLLECTION =====
    match /auth_logs/{logId} {
      allow write: if false;
      allow read: if isAdmin();
    }

    // ===== POOL STATUS COLLECTION =====
    match /pool_status/{document} {
      allow read: if true;
      allow write: if false;
    }

    // ===== MESSAGES COLLECTION =====
    match /messages/{threadId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() &&
        ( !('participants' in request.resource.data) || (
            request.resource.data.participants is list &&
            request.resource.data.participants.size() >= 2 &&
            request.resource.data.participants[0] is string &&
            request.resource.data.participants[1] is string
        )) &&
        (!('messages' in request.resource.data) || (
          request.resource.data.messages is map &&
          request.resource.data.messages.size() <= 100 &&
          request.resource.data.messages.size() >= 0
        ));
    }

    // ===== USER EVENT HISTORY COLLECTION =====
    match /user_event_history/{document} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }

    // ===== FEEDBACK COLLECTION =====
    match /feedback/{document} {
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.message is string &&
        request.resource.data.message.size() > 0 &&
        request.resource.data.message.size() <= 5000 &&
        !request.resource.data.message.matches('.*[<>{}\\[\\]\\\\].*') &&
        request.resource.data.createdAt is timestamp;
      allow read: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // ===== ADMIN CONFIG COLLECTION =====
    match /admin_config/{document} {
      allow read, write: if isAdmin();
    }
  }
}